# -*- coding: utf-8 -*-
"""training.ipynb

Automatically generated by Colaboratory.
 Developed  by Anand Pandey
Original file is located at
    https://colab.research.google.com/drive/1ML4_XEi2m4M_lxo8CojwSwFwv-zGguAh
"""

from google.colab import drive
drive.mount('/content/drive')

from keras.models import Sequential
from keras.layers.normalization import BatchNormalization
from keras.layers.convolutional import Conv2D
from keras.layers.convolutional import MaxPooling2D
from keras.layers.core import Activation
from keras.layers.core import Flatten
from keras.layers.core import Dropout
from keras.layers.core import Dense
from keras import backend as K

class inception:
    @staticmethod
    def build(width,height,depth,classes):
       model=Sequential()
       inputS=(height,width,depth)
       chanDim=-1
       if(K.image_data_format()=="channels_first"):
            inputS=(depth,height,width)
            chanDim=-1
       input_layer = Input(shape=(128, 128, 3))

       x = Conv2D(64, (7, 7), padding='same', strides=(2, 2), activation='relu', name='conv_1_7x7/2', kernel_initializer=kernel_init, bias_initializer=bias_init)(input_layer)
       x = MaxPool2D((3, 3), padding='same', strides=(2, 2), name='max_pool_1_3x3/2')(x)
       x = Conv2D(64, (1, 1), padding='same', strides=(1, 1), activation='relu', name='conv_2a_3x3/1')(x)
       x = Conv2D(192, (3, 3), padding='same', strides=(1, 1), activation='relu', name='conv_2b_3x3/1')(x)
       x = MaxPool2D((3, 3), padding='same', strides=(2, 2), name='max_pool_2_3x3/2')(x)

       x = inception_module(x,
                            filters_1x1=64,
                            filters_3x3_reduce=96,
                            filters_3x3=128,
                            filters_5x5_reduce=16,
                            filters_5x5=32,
                            filters_pool_proj=32,
                            name='inception_3a')
       x = inception_module(x,
                            filters_1x1=128,
                            filters_3x3_reduce=128,
                            filters_3x3=192,
                            filters_5x5_reduce=32,
                            filters_5x5=96,
                            filters_pool_proj=64,
                            name='inception_3b')
       x = MaxPool2D((3, 3), padding='same', strides=(2, 2), name='max_pool_3_3x3/2')(x)
       x = inception_module(x,
                            filters_1x1=192,
                            filters_3x3_reduce=96,
                            filters_3x3=208,
                            filters_5x5_reduce=16,
                            filters_5x5=48,
                            filters_pool_proj=64,
                            name='inception_4a')
       x1 = AveragePooling2D((5, 5), strides=3)(x)
       x1 = Conv2D(128, (1, 1), padding='same', activation='relu')(x1)
       x1 = Flatten()(x1)
       x1 = Dense(1024, activation='relu')(x1)
       x1 = Dropout(0.7)(x1)
       x1 = Dense(10, activation='softmax', name='auxilliary_output_1')(x1)
       x = inception_module(x,
                            filters_1x1=160,
                            filters_3x3_reduce=112,
                            filters_3x3=224,
                            filters_5x5_reduce=24,
                            filters_5x5=64,
                            filters_pool_proj=64,
                            name='inception_4b')
       x = inception_module(x,
                            filters_1x1=128,
                            filters_3x3_reduce=128,
                            filters_3x3=256,
                            filters_5x5_reduce=24,
                            filters_5x5=64,
                            filters_pool_proj=64,
                            name='inception_4c')
       x = inception_module(x,
                            filters_1x1=112,
                            filters_3x3_reduce=144,
                            filters_3x3=288,
                            filters_5x5_reduce=32,
                            filters_5x5=64,
                            filters_pool_proj=64,
                            name='inception_4d')

       x2 = AveragePooling2D((5, 5), strides=3)(x)
       x2 = Conv2D(128, (1, 1), padding='same', activation='relu')(x2)
       x2 = Flatten()(x2)
       x2 = Dense(1024, activation='relu')(x2)
       x2 = Dropout(0.7)(x2)
       x2 = Dense(10, activation='softmax', name='auxilliary_output_2')(x2)

       x = inception_module(x,
                            filters_1x1=256,
                            filters_3x3_reduce=160,
                            filters_3x3=320,
                            filters_5x5_reduce=32,
                            filters_5x5=128,
                            filters_pool_proj=128,
                            name='inception_4e')

       x = MaxPool2D((3, 3), padding='same', strides=(2, 2), name='max_pool_4_3x3/2')(x)

       x = inception_module(x,
                            filters_1x1=256,
                            filters_3x3_reduce=160,
                            filters_3x3=320,
                            filters_5x5_reduce=32,
                            filters_5x5=128,
                            filters_pool_proj=128,
                            name='inception_5a')

       x = inception_module(x,
                            filters_1x1=384,
                            filters_3x3_reduce=192,
                            filters_3x3=384,
                            filters_5x5_reduce=48,
                            filters_5x5=128,
                            filters_pool_proj=128,
                            name='inception_5b')

       x = GlobalAveragePooling2D(name='avg_pool_5_3x3/1')(x)
       x = Dropout(0.4)(x)
       x = Dense(10, activation='softmax', name='output')(x)
       model = Model(input_layer, [x, x1, x2], name='inception_v1')
       return model

from keras.models import Sequential
from keras.layers.normalization import BatchNormalization
from keras.layers.convolutional import Conv2D
from keras.layers.convolutional import MaxPooling2D
from keras.layers.core import Activation
from keras.layers.core import Flatten
from keras.layers.core import Dropout
from keras.layers.core import Dense
from keras import backend as K
class MiniVGG:
	@staticmethod
	def build(width,height,depth,classes):
		model=Sequential()
		inputS=(height,width,depth)
		chanDim=-1
		if(K.image_data_format()=="channels_first"):
			inputS=(depth,height,width)
			chanDim=-1
		model.add(Conv2D(32,(3,3),padding="same",input_shape=inputS))
		model.add(Activation("relu"))
		model.add(BatchNormalization(axis=chanDim))
		model.add(Conv2D(32,(3,3),padding="same"))
		model.add(Activation("relu"))
		model.add(BatchNormalization(axis=chanDim))
		model.add(MaxPooling2D(pool_size=(2,2)))
		model.add(Dropout(0.25))
		model.add(Conv2D(64,(3,3),padding="same"))
		model.add(Activation("relu"))
		model.add(BatchNormalization(axis=chanDim))
		model.add(MaxPooling2D(pool_size=(2,2)))
		model.add(Dropout(0.25))
		model.add(Flatten())
		model.add(Dense(512))
		model.add(Activation("relu"))
		model.add(BatchNormalization())
		model.add(Dropout(0.5))
		model.add(Dense(classes))
		model.add(Activation("softmax"))


		return model



import matplotlib
matplotlib.use("Agg")

# import the necessary packages
import tensorflow as tf
from keras.preprocessing.image import ImageDataGenerator
from keras.optimizers import Adam
from sklearn.model_selection import train_test_split
from keras.preprocessing.image import img_to_array
from keras.utils import to_categorical
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix
from imutils import paths
import matplotlib.pyplot as plt
import numpy as np
import argparse
import random
import cv2
import os

EPOCHS = 3
INIT_LR = 1e-3 #Initial Learning rate
BS = 32 # Bach size to feed

# initialize the data and labels
print("Load images' NPY file")
data = []
labels = []
# grab the image paths and randomly shuffle them
imagePaths = sorted(list(paths.list_images(r"/content/drive/My Drive/Colab Notebooks/DepthImage")))
random.seed(42)
random.shuffle(imagePaths)

# loop over the input images
for imagePath in imagePaths:
	# load the image, pre-process it, and store it in the data list
	image = cv2.imread(imagePath)
	image = cv2.resize(image, (128, 128))
	image = img_to_array(image)
	data.append(image)

	# extract the class label from the image path and update the
	# labels list
	label = imagePath.split(os.path.sep)[-2]
	label = 1 if label == "fake" else 0
	labels.append(label)

# scale the raw pixel intensities to the range [0, 1]
data = np.array(data, dtype="float") / 255.0
np.save('data.npy',data)
labels = np.array(labels)
np.save('labels.npy',labels)
data=np.load('data.npy')
labels=np.load('labels.npy')
# partition the data into training and testing splits using 75% of
# the data for training and the remaining 25% for testing
(trainX, testX, trainY, testY) = train_test_split(data,
	labels, test_size=0.25, random_state=42)

# convert the labels from integers to vectors
trainY = to_categorical(trainY, num_classes=2)
testY = to_categorical(testY, num_classes=2)

# construct the image generator for data augmentation
aug = ImageDataGenerator(rotation_range=30, width_shift_range=0.1,height_shift_range=0.1, shear_range=0.2, zoom_range=0.2,horizontal_flip=True, fill_mode="nearest")

# initialize the model
print("Compiling model...")
model = MiniVGG.build(width=128, height=128, depth=3, classes=2)
opt = Adam(lr=INIT_LR, decay=INIT_LR / EPOCHS) #Optimise uisng Adam 
model.compile(loss="binary_crossentropy", optimizer=opt,metrics=["accuracy"])

# train the network
print("Training network")
H = model.fit_generator(aug.flow(trainX, trainY, batch_size=BS),
	validation_data=(testX, testY), steps_per_epoch=len(trainX),
	epochs=EPOCHS, verbose=1)
label_name=["real","fake"]
print("[INFO] evaluating network...")
predictions = model.predict(testX, batch_size=128) 
print(classification_report(testY.argmax(axis=1),
predictions.argmax(axis=1)))

cm = confusion_matrix(testY.argmax(axis=1), predictions.argmax(axis=1))
total = sum(sum(cm))
acc = (cm[0, 0] + cm[1, 1]) / total
print(cm)

N = EPOCHS

